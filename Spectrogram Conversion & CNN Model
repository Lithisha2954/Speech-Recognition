from tensorflow.keras import layers, models

# Convert waveform to spectrogram
def get_spectrogram(waveform):
    spectrogram = tf.signal.stft(waveform, frame_length=255, frame_step=128)
    spectrogram = tf.abs(spectrogram)
    return spectrogram[..., tf.newaxis]

train_spec_ds = train_ds.map(lambda x, y: (get_spectrogram(x), y))
val_spec_ds = val_ds.map(lambda x, y: (get_spectrogram(x), y))
test_spec_ds = test_ds.map(lambda x, y: (get_spectrogram(x), y))

# Optimize
train_spec_ds = train_spec_ds.cache().shuffle(10000).prefetch(tf.data.AUTOTUNE)
val_spec_ds = val_spec_ds.cache().prefetch(tf.data.AUTOTUNE)
test_spec_ds = test_spec_ds.cache().prefetch(tf.data.AUTOTUNE)

# Build CNN
input_shape = next(iter(train_spec_ds.take(1)))[0].shape[1:]
num_labels = len(label_names)

norm_layer = layers.Normalization()
norm_layer.adapt(train_spec_ds.map(lambda spec, label: spec))

model = models.Sequential([
    layers.Input(shape=input_shape),
    layers.Resizing(32, 32),
    norm_layer,
    layers.Conv2D(32, 3, activation='relu'),
    layers.Conv2D(64, 3, activation='relu'),
    layers.MaxPooling2D(),
    layers.Dropout(0.25),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_labels),
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train
history = model.fit(
    train_spec_ds,
    validation_data=val_spec_ds,
    epochs=15,
    callbacks=tf.keras.callbacks.EarlyStopping(patience=2, verbose=1)
)
